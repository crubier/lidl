interaction  ((user:{ clr:Activation in, msg:Text out }) pilots (robot:{ ack:Text out, alert:Text out})): Activation inwith  interaction    ((a:Activation in) is inactive):Boolean out  with    interaction (fct is inactive):{Activation->Boolean} out is (function isInactive)  is    (      ((#(a) is inactive)!)      with behaviour      (apply (fct is inactive) to (a) and get ((#(a) is inactive)?) )    )  interaction    ((a:Activation in) is active):Boolean out  with    interaction (is active):{Activation->Boolean}out is (function isActive)  is    (      ((#(a) is active)!)      with behaviour      (apply (is active) to (a) and get ((#(a) is active)?) )    )  interaction    (when (cond:Boolean in) then (a:Activation out)):Activation in  with    interaction      (whenThenElse):{{cond:Boolean,source:Activation}->{a:Activation,b:Activation}}out    is      (function whenThenElse)  is    (      ( (activation of when (cond) then (a) )?)      with behaviour      (        apply        (whenThenElse)        to        ({  cond:(cond)  source:( (activation of when (cond) then (a) )!)   })        and get        ({a:(a)})      )    )  interaction    (when (cond:Boolean in) then (a:Activation out) else (b:Activation out)):Activation in  with    interaction      (whenThenElse):{{cond:Boolean,source:Activation}->{a:Activation,b:Activation}}out    is      (function whenThenElse)  is    (      ( (activation of when (cond) then (a) else (b))?)      with behaviour      (        apply        (whenThenElse)        to        ({  cond:(cond)  source:( (activation of when (cond) then (a) else (b))!)   })        and get        ({a:(a) b:(b)})      )    )  interaction    (if (cond:Boolean in) then (x:Text in) else (y:Text in)):Text out  is    (      ( (result of if (cond) then (x) else (y))?)      with behaviour      (        when        (cond)        then        (( (result of if (cond) then (x) else (y))!) = (x))        else        (( (result of if (cond) then (x) else (y))!) = (y))      )    )  interaction    ( (a:Text in) fallback to (b:Text in)):Text out  is    (      if ((a) is active)      then (a)      else (b)    )  interaction    (previous (a:Text in)):Text out  is    (((# previous (a))!) with behaviour (((# previous (a))?) = previous (a)))  interaction    (all (a:Activation out)  (b:Activation out)):Activation in  with    interaction (func all):{Activation->{a:Activation,b:Activation,c:Activation,d:Activation}} out is (function all)  is    (      ((variable all (a) (b))?)      with behaviour      (        apply        (func all)        to        ((variable all (a) (b))!)        and get        ({a:(a) b:(b)})      )    )  interaction    (all (a:Activation out)  (b:Activation out) (c:Activation out)  (d:Activation out)):Activation in  with    interaction (func all):{Activation->{a:Activation,b:Activation,c:Activation,d:Activation}} out is (function all)  is    (      ((variable all (a) (b) (c) (d))?)      with behaviour      (        apply        (func all)        to        ((variable all (a) (b) (c) (d))!)        and get        ({a:(a) b:(b) c:(c) d:(d)})      )    )  interaction    (maintain (x: Text out) from (y:Text in) until (z:Activation in)): Activation in  is    (      all      (when ((z) is inactive) then ( ((xx)?) = ((y) fallback to (previous((xx)!))) ) )      ( (x) = ((xx)!) )    )is  (all    (maintain ((msgDisplayed)?) from ((msgAlertFromRobot)!) until ((userAction)!))    (when (((userAction)!)is active) then (((msgToRobot)?) = ("Cleared")))    ((user) = ({clr : ((userAction)?)  msg : ((msgDisplayed)!)}))    ((robot) = ({ack : ((msgToRobot)!)  alert : ((msgAlertFromRobot)?)}))  )