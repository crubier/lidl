
<ColumnGroup fixed={true} label={x.name}>
   <Column   fixed={true} label={x.data.name} dataKey={x.name} width={150} />
   <Column   fixed={true} label={x.direction} dataKey={"d"+x.name} width={150} />
</ColumnGroup>




/*
  _rowGetter(index){


   var listOfAtoms = this.props.listOfAtoms;
   var listOfValues=this.props.listOfValues;
   console.log("verif =",JSON.stringify(listOfValues));
   var res=[];
   for(var i=0;i<listOfValues.length;i++){
     var ligne=[];
     console.log("i ", i);
     for(var j=0;j<listOfAtoms.length;j++){
       var k=0;
       console.log("j =",j);
       console.log("listOfAtoms[j].name ",listOfAtoms[j].name);
       console.log("listOfValues[i][k].key ",listOfValues[i][k].key);
       console.log("taille de listOfValues[i].length =",listOfValues[i].length);

       while(((listOfValues[i][k].key)!=listOfAtoms[j].name)&&(k<listOfValues[i].length)){
         console.log("k= ",k);
         console.log("slama2 =",listOfValues[i][k].key);
         k++;
         console.log("k2 =",k);
         if(k==listOfValues[i].length){
           break;
         }
       }




       if (k<listOfValues[i].length){
         console.log("slama =",listOfValues[i][k].key);
         ligne[j]=listOfValues[i][k].value;
         console.log("ligne ",ligne) ;//

       }else{
         ligne[j]='-';
       }
     }
     res[res.length]=ligne;
     console.log("resultat final =",JSON.stringify(res));

   }




 return res[index];
}
*/
/*

getInitialState() {

 return {
   dataList: new FakerDataList(ROWS)

 }

}

*/



{listOfAtoms.map(function(x) {
   return  (
  <ColumnGroup fixed={true} label={x.name}>
     <Column   fixed={true} label={x.data.name} dataKey={x.name} width={150} />
     <Column   fixed={true} label={x.direction} dataKey={"d"+x.name} width={150} />
  </ColumnGroup>
);

})}



rowHeight={30}
groupHeaderHeight={30}
headerHeight={30}
rowGetter={this._rowGetter.bind(this)}
rowsCount={1}
width={650}
height={300}
scrollTop={0}
scrollLeft={0}
overflowX={"auto"}
overflowY={"auto"}>
