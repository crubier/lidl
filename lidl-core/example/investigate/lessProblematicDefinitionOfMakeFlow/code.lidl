interaction
  (bob):{theNumber:Number in,theResult:Number out}
with

  interaction
    (previous (x:Number in)):Number out
  is
    (
      (previous(x)!)
      with behaviour
      ((previous(x)?)= previous (x))
    )

  interaction
    (not(a:Boolean in)):Boolean out
  with
    interaction (boolean negation):{Boolean->Boolean} out is (function boolNot)
  is
    (
      (not (a)!)
      with behaviour
      ((boolean negation)  (a) = (not (a)?) )
    )

  interaction
    ((a:Number in) is active):Boolean out
  with
    interaction (is active):{Number->Boolean}out is (function isActive)
  is
    (
      ((a) is active!)
      with behaviour
      (apply (is active) to (a) and get ((a) is active?) )
    )

  interaction
    ((a:Number in)+(b:Number in)):Number out
  with
    interaction (addition):{{a:Number,b:Number}->Number} out is (function addition)
  is
    (
      (result of (a)+(b)!)
      with behaviour
      (
        apply
        (addition)
        to
        ({a:(a)b:(b)})
        and get
        (result of (a)+(b)?)
      )
    )


  interaction
    (init):Boolean out
  is
    ( not ( (previous(1) ) is active ) )

  interaction
    (all (a:Activation out) else (b:Activation out)):Activation in
  with
    interaction (func all):{Activation->{a:Activation,b:Activation}} out is (function all)
  is
    (
      (variable all (a) (b)?)
      with behaviour
      (
        apply
        (function all)
        to
        (variable all (a) (b)!)
        and get
        ({a:(a) b:(b)})
      )
    )

  interaction
    ( (a:Number in) fallback to (b:Number in)):Number out
  is
    (
      if ((a) is active)
      then (a)
      else (b)
    )

  interaction
    (make (x:Number in)(xx:Number out) flow initially from (y:Number in)):Activation in
  is
    ( (xx)  =   (  (new (xx)!) fallback to  (if (init) then (y) else (previous (x)) ) ) )


  interaction
    ((u:Number in)==(v:Number in)):Boolean out
  with
    interaction (is equal):{{a:Number,b:Number}->Boolean}out is (function isEqual)
  is
    (
      (result of (u)==(v)!)
      with behaviour
      (apply (is equal) to ({a:(u),b:(v)}) and get (result of (u)==(v)?) )
    )


  interaction
    (when (cond:Boolean in) then (a:Activation out) else (b:Activation out)):Activation in
  with
    interaction
      (whenThenElse):{{cond:Boolean,source:Activation}->{a:Activation,b:Activation}}out
    is
      (function whenThenElse)
  is
    (
      (activation of when (cond) then (a) else (b) ?)
      with behaviour
      (
        apply
        (whenThenElse)
        to
        ({  cond:(cond)  source:(activation of when (cond) then (a) else (b) !)   })
        and get
        ({a:(a) b:(b)})
      )
    )

  interaction
    (if (cond:Boolean in) then (x:Number in) else (y:Number in)):Number out
  is
    (
      ( result of if (cond) then (x) else (y) !)
      with behaviour
      (
        when
        (cond)
        then
        (( result of if (cond) then (x) else (y) ?) = (x))
        else
        (( result of if (cond) then (x) else (y) ?) = (y))
      )
    )


is
  (
    ({
      theNumber:(new (theNumber?)?)
      theResult:(theNumber!)
    })
    with behaviour
    (make (theNumber!)(theNumber?) flow initially from (1) )
  )
