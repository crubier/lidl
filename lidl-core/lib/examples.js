'use strict'; // File automatically generated when performing     npm run build   
// It contains examples of lidl code from the example/ok folder
module.exports = { 
  header: 'var isActive = function(x) {\n  return (x !== null && x !== undefined);\n};\n\nvar cool = function(x) {\n  if (isActive(x.a) && isActive(x.b)) {\n    return {\n      sum: (x.a + x.b),\n      diff: (x.a - x.b)\n    };\n  } else {\n    return {\n      sum: inactive,\n      diff: inactive\n    };\n  }\n};\n\nvar fallback = function(x) {\n  return (isActive(x.a) ? x.a : x.b);\n};\n\nvar return0 = function(x) {\n  return 0;\n};\n\n\nvar return1 = function(x) {\n  return 1;\n};\n\nvar addition = function(x) {\n  if (isActive(x.a) && isActive(x.b)) {\n    return x.a + x.b;\n  } else {\n    return inactive;\n  }\n};\n\nvar multiplication = function(x) {\n  if (isActive(x.a) && isActive(x.b)) {\n    return x.a * x.b;\n  } else {\n    return inactive;\n  }\n};\n\nvar substraction = function(x) {\n  if (isActive(x.a) && isActive(x.b)) {\n    return x.a - x.b;\n  } else {\n    return inactive;\n  }\n};\n\nvar division = function(x) {\n  if (isActive(x.a) && isActive(x.b)) {\n    return x.a / x.b;\n  } else {\n    return inactive;\n  }\n};\n\nvar remainder = function(x) {\n  if (isActive(x.a) && isActive(x.b)) {\n    return x.a % x.b;\n  } else {\n    return inactive;\n  }\n};\n\nvar power = function(x) {\n  if (isActive(x.a) && isActive(x.b)) {\n    return Math.pow(x.a, x.b);\n  } else {\n    return inactive;\n  }\n};\n\nvar addOne = function(x) {\n  if (isActive(x))\n    return x + 1;\n  else {\n    return inactive;\n  }\n};\n\nvar identity = function(x) {\n  return x;\n};\n\nvar isEqual = function(x) {\n  if (isActive(x.a) && isActive(x.b)) {\n    return (x.a === x.b) ? true : false;\n  } else {\n    return inactive;\n  }\n};\n\n\nvar boolNot = function(x) {\n  if (isActive(x)) {\n    return !x;\n  } else {\n    return inactive;\n  }\n};\n\nvar ifThenElse = function(x) {\n  if (isActive(x)) {\n    if (isActive(x.cond)) {\n      if (x.cond === true) {\n        return x.a;\n      } else if (x.cond === false) {\n        return x.b;\n      } else {\n        return inactive;\n      }\n    } else {\n      return inactive;\n    }\n  } else {\n    return inactive;\n  }\n};\n\n\nvar whenThenElse = function(x) {\n  if (isActive(x)) {\n    if (isActive(x.cond)) {\n      if (x.cond === true) {\n        return {\n          a: active,\n          b: inactive\n        };\n      } else if (x.cond === false) {\n        return {\n          a: inactive,\n          b: active\n        };\n      } else {\n        return inactive;\n      }\n    } else {\n      return inactive;\n    }\n  } else {\n    return inactive;\n  }\n};\n\n\nvar all = function(x) {\n  return {\n    a: x,\n    b: x,\n    c: x,\n    d: x,\n    e: x,\n    f: x,\n    g: x,\n    h: x,\n    i: x,\n    j: x,\n    k: x,\n    l: x,\n    m: x,\n    n: x,\n    o: x,\n    p: x\n  };\n};\n\n\nvar cursor = function(mouse) {\n  var cursor = {\n    type: "shadow",\n    blur: mouse.buttons === 0 ? 20 : 10,\n    offset: {\n      x: 0,\n      y: mouse.buttons === 0 ? 4 : 2\n    },\n    color: "rgba(0, 0, 0, 0.5)",\n    content: {\n      type: "translate",\n      x: mouse.position.x,\n      y: mouse.position.y,\n      content: {\n        type: "scale",\n        width: mouse.buttons === 0 ? 1 : 0.8,\n        height: mouse.buttons === 0 ? 1 : 0.8,\n        content: {\n          type: "fill",\n          style: "rgba(200, 0, 200, 1)",\n          content: {\n            type: "path",\n            content: [{\n              type: "begin"\n            }, {\n              type: "move",\n              x: 0,\n              y: 0\n            }, {\n              type: "line",\n              x: 0,\n              y: 15\n            }, {\n              type: "line",\n              x: 10.6,\n              y: 10.6\n            }, {\n              type: "close"\n            }]\n          }\n        }\n      }\n    }\n  };\n  return cursor;\n}\n\n\n\nvar button = function(button) {\n  var button = {\n    type: "shadow",\n    blur: button.pushed ? 10 : 20,\n    offset: {\n      x: 0,\n      y: button.pushed ? 2 : 4\n    },\n    color: "rgba(0, 0, 0, 0.5)",\n    content: {\n      type: "group",\n      content: [{\n        type: "fill",\n        style: "rgba(0, 171, 255, 1)",\n        content: {\n          type: "rect",\n          x: button.x,\n          y: button.y,\n          width: button.width,\n          height: button.height\n        }\n      }, {\n        type: "fill",\n        style: "rgba(255, 255, 255, 1)",\n        content: {\n          type: "text",\n          textBaseline: "middle",\n          textAlign: "center",\n          font: "200 30px Helvetica neue",\n          text: button.text,\n          x: button.x + button.width / 2,\n          y: button.y + button.height / 2\n        }\n      }]\n    }\n  };\n  return button;\n}\n\nvar group = function(elements) {\n  var group = {\n      type: "group",\n      content: [elements.a,elements.b ]\n    };\n  return group;\n}\n\n', 














































































































































































































































































  lidl: [{ 
    name: 'Affectation Expression', 
    fileName: 'example/ok/affectationExpression', 
    code: 'interaction\n  (bob):{theNumber:Number in,theResult:Number out}\nwith\n\n  interaction\n    (the magic number):Number out\n  with\n    interaction (return1):{Void->Number} out is (function return1)\n  is\n    (\n      ( (result1)!)\n      with behaviour\n      (\n        apply\n        (return1)\n        to\n        ( (ok)!)\n        and get\n        ( (result1)?)\n      )\n    )\n\n  interaction\n    ((a:Number in)+(b:Number in)):Number out\n  with\n    interaction (addition):{{a:Number,b:Number}->Number} out is (function addition)\n  is\n    (\n      ( (result of (a)+(b))!)\n      with behaviour\n      (\n        apply\n        (addition)\n        to\n        ({a:(a)b:(b)})\n        and get\n        ( (result of (a)+(b))?)\n      )\n    )\n\nis\n  (\n    ({\n      theNumber:((theNumber)?)\n      theResult:((theResult)!)\n    })\n  with behaviour\n    (\n      ((theResult)?) =((the magic number )+((theNumber)!))\n    )\n  )\n', 



















































    scenario: '[\n  {\n    "args":  {},\n    "inter":  { "theNumber": 50,  "theResult": 51 }\n  },\n  {\n    "args":  {},\n    "inter":  { "theNumber": 78,  "theResult": 79 }\n  },\n  {\n    "args":  {},\n    "inter":  { "theNumber": null,  "theResult": null }\n  },\n  {\n    "args":  {},\n    "inter":  { "theNumber": 42,  "theResult": 43 }\n  },\n  {\n    "args":  {},\n    "inter":  { "theNumber": 67,  "theResult": 68 }\n  }\n]\n' }, 






















  { 
    name: 'Arguments', 
    fileName: 'example/ok/arguments', 
    code: 'interaction\n  (bob(a:Number in)):Number out\nis\n  (a)\n', 




    scenario: '[\n  {\n    "args":  {"a":28},\n    "inter":  28\n  },\n  {\n    "args":  {"a":2},\n    "inter":  2\n  },\n  {\n    "args":  {"a":3},\n    "inter":  3\n  },\n  {\n    "args":  {"a":6},\n    "inter":  6\n  }\n]\n' }, 


















  { 
    name: 'Compilation Example Thesis', 
    fileName: 'example/ok/compilationExampleThesis', 
    code: 'interaction\n  (My Simple User Interface):{theNumber: Number in, theResult: Number out}\nwith\n  interaction (add one):{Number->Number}out is (function addOne)\nis\n  (\n    ({\n      theNumber:  ((x)?)\n      theResult:  ((y)!)\n    })\n    with behaviour\n    (apply (add one) to ((x)!) and get ((y)?) )\n  )\n', 













    scenario: '[\n  {\n    "args":  {},\n    "inter":  { "theNumber": 50,  "theResult": 51 }\n  },\n  {\n    "args":  {},\n    "inter":  { "theNumber": 78,  "theResult": 79 }\n  },\n  {\n    "args":  {},\n    "inter":  { "theNumber": null,  "theResult": null }\n  },\n  {\n    "args":  {},\n    "inter":  { "theNumber": 42,  "theResult": 43 }\n  },\n  {\n    "args":  {},\n    "inter":  { "theNumber": 67,  "theResult": 68 }\n  }\n]\n' }, 






















  { 
    name: 'Composition 2 X 1', 
    fileName: 'example/ok/composition2x1', 
    code: 'interaction\n  (bob):{theNumber:Number in,theOther:Number in,theResult:Number out}\nwith\n  interaction\n    (addition):{{a:Number,b:Number}->Number}out\n  is\n    (function addition)\nis\n  (\n    ({\n      theNumber:((x)?)\n      theOther:((y)?)\n      theResult:((z)!)\n    })\n   with behaviour\n    (apply\n      (addition)\n      to\n      ({a:((x)!)b:((y)!)})\n      and get\n      ((z)?)\n    )\n  )\n', 























    scenario: '[\n  {\n    "args":  {},\n    "inter":  { "theNumber": 50,"theOther": 50,   "theResult": 100 }\n  },\n  {\n    "args":  {},\n    "inter":  { "theNumber": 78, "theOther": 2, "theResult": 80 }\n  },\n  {\n    "args":  {},\n    "inter":  { "theNumber": null,"theOther": 50,  "theResult": null }\n  },\n  {\n    "args":  {},\n    "inter":  { "theNumber": 42,"theOther": 12,  "theResult": 54 }\n  },\n  {\n    "args":  {},\n    "inter":  { "theNumber": 67,"theOther": 50,  "theResult": 117 }\n  }\n]\n' }, 






















  { 
    name: 'Composition 2 X 2', 
    fileName: 'example/ok/composition2x2', 
    code: 'interaction\n  (bob):{theNumber:Number in,theOther:Number in,theResult:Number out,theLast:Number out}\nwith\n interaction\n  (cool):{{a:Number,b:Number}->{sum:Number,diff:Number}} out\n  is\n  (function cool)\nis\n  (\n    ({\n      theNumber:( (theNumber)?)\n      theOther:( (y)?)\n      theResult:( (theResult)!)\n      theLast:( (wow)!)\n    })\n  with behaviour\n    ( apply (cool)\n      to\n      ({a:( (theNumber)!)b:( (y)!)})\n      and get\n      ({sum:( (theResult)?)diff:( (wow)?)})\n    )\n  )\n', 























    scenario: '[\n  {\n    "args":  {},\n    "inter":  { "theNumber": 50,"theOther": 50,   "theResult": 100,"theLast":0 }\n  },\n  {\n    "args":  {},\n    "inter":  { "theNumber": 78, "theOther": 2, "theResult": 80,"theLast":76 }\n  },\n  {\n    "args":  {},\n    "inter":  { "theNumber": null,"theOther": 50,  "theResult": null,"theLast":null }\n  },\n  {\n    "args":  {},\n    "inter":  { "theNumber": 42,"theOther": 12,  "theResult": 54,"theLast":30 }\n  },\n  {\n    "args":  {},\n    "inter":  { "theNumber": 67,"theOther": 50,  "theResult": 117,"theLast":17 }\n  }\n]\n' }, 






















  { 
    name: 'Definition Of Init', 
    fileName: 'example/ok/definitionOfInit', 
    code: 'interaction\n  (bob):{theNumber:Number in,theResult:Boolean out}\nwith\n\n  interaction\n    (previous (x:Number in)):Number out\n  is\n    (\n      ((the previous(x))!)\n      with behaviour\n      (((the previous(x))?)= previous (x))\n    )\n\n  interaction\n    ((a:Number in)==(b:Number in)):Boolean out\n  with\n    interaction (is equal):{{a:Number,b:Number}->Boolean}out is (function isEqual)\n  is\n    (\n      ((result of (a)==(b))!)\n      with behaviour\n      (apply (is equal) to ({a:(a),b:(b)}) and get ( (result of (a)==(b))?) )\n    )\n\n  interaction\n    (not(a:Boolean in)):Boolean out\n  with\n    interaction (boolean negation):{Boolean->Boolean} out is (function boolNot)\n  is\n    (\n      ((#not (a)) !)\n      with behaviour\n      (apply (boolean negation) to (a) and get ((#not (a))?) )\n    )\n\n  interaction\n    ((a:Number in) is active):Boolean out\n  with\n    interaction (is active):{Number->Boolean} out is (function isActive)\n  is\n    (\n      ( (#(a) is active)!)\n      with behaviour\n      (apply (is active) to (a) and get ( (#(a) is active)?) )\n    )\n\n  interaction\n    ((a:Number in)+(b:Number in)):Number out\n  with\n    interaction (addition):{{a:Number,b:Number}->Number} out is (function addition)\n  is\n    (\n      ( (result of (a)+(b))!)\n      with behaviour\n      (\n        apply\n        (addition)\n        to\n        ({a:(a)b:(b)})\n        and get\n        ( (result of (a)+(b))?)\n      )\n    )\n\n  interaction\n    (init):Boolean out\n  is\n    ( not ( (previous(1) ) is active ) )\n\nis\n  ({\n    theNumber:((theNumber)?)\n    theResult:(init)\n  })\n', 










































































    scenario: '[\n  {\n    "args":  {},\n    "inter":  { "theNumber": 50,  "theResult": true }\n  },\n  {\n    "args":  {},\n    "inter":  { "theNumber": 78,  "theResult": false }\n  },\n  {\n    "args":  {},\n    "inter":  { "theNumber": null,  "theResult": false }\n  },\n  {\n    "args":  {},\n    "inter":  { "theNumber": 42,  "theResult": false }\n  },\n  {\n    "args":  {},\n    "inter":  { "theNumber": 67,  "theResult": false }\n  }\n]\n' }, 






















  { 
    name: 'Definition Of Make Flow', 
    fileName: 'example/ok/definitionOfMakeFlow', 
    code: 'interaction\n  (bob):{theNumber:Number in,theResult:Number out}\nwith\n\n  interaction\n    (previous (x:Number in)):Number out\n  is\n    (\n      ((the previous(x))!)\n      with behaviour\n      (((the previous(x))?)= previous (x))\n    )\n\n  interaction\n    (not(a:Boolean in)):Boolean out\n  with\n    interaction (boolean negation):{Boolean->Boolean} out is (function boolNot)\n  is\n    (\n      ((#not (a))!)\n      with behaviour\n      ((boolean negation)  (a) = ((#not (a))?) )\n    )\n\n  interaction\n    ((a:Number in) is active):Boolean out\n  with\n    interaction (is active):{Number->Boolean}out is (function isActive)\n  is\n    (\n      ((#(a) is active)!)\n      with behaviour\n      (apply (is active) to (a) and get ((#(a) is active)?) )\n    )\n\n  interaction\n    ((a:Number in)+(b:Number in)):Number out\n  with\n    interaction (addition):{{a:Number,b:Number}->Number} out is (function addition)\n  is\n    (\n      ((result of (a)+(b))!)\n      with behaviour\n      (\n        apply\n        (addition)\n        to\n        ({a:(a)b:(b)})\n        and get\n        ((result of (a)+(b))?)\n      )\n    )\n\n\n  interaction\n    (init):Boolean out\n  is\n    ( not ( (previous(1) ) is active ) )\n\n  interaction\n    (all (a:Activation out) else (b:Activation out)):Activation in\n  with\n    interaction (func all):{Activation->{a:Activation,b:Activation}} out is (function all)\n  is\n    (\n      ((variable all (a) (b))?)\n      with behaviour\n      (\n        apply\n        (function all)\n        to\n        ((variable all (a) (b))!)\n        and get\n        ({a:(a) b:(b)})\n      )\n    )\n\n  interaction\n    ( (a:Number in) fallback to (b:Number in)):Number out\n  is\n    (\n      if ((a) is active)\n      then (a)\n      else (b)\n    )\n\n\n\n  interaction\n    ((u:Number in)==(v:Number in)):Boolean out\n  with\n    interaction (is equal):{{a:Number,b:Number}->Boolean}out is (function isEqual)\n  is\n    (\n      ((result of (u)==(v))!)\n      with behaviour\n      (apply (is equal) to ({a:(u),b:(v)}) and get ((result of (u)==(v))?) )\n    )\n\n\n  interaction\n    (when (cond:Boolean in) then (a:Activation out) else (b:Activation out)):Activation in\n  with\n    interaction\n      (whenThenElse):{{cond:Boolean,source:Activation}->{a:Activation,b:Activation}}out\n    is\n      (function whenThenElse)\n  is\n    (\n      ((activation of when (cond) then (a) else (b) )?)\n      with behaviour\n      (\n        apply\n        (whenThenElse)\n        to\n        ({  cond:(cond)  source:((activation of when (cond) then (a) else (b)) !)   })\n        and get\n        ({a:(a) b:(b)})\n      )\n    )\n\n  interaction\n    (if (cond:Boolean in) then (x:Number in) else (y:Number in)):Number out\n  is\n    (\n      ( (result of if (cond) then (x) else (y)) !)\n      with behaviour\n      (\n        when\n        (cond)\n        then\n        (( (result of if (cond) then (x) else (y) )?) = (x))\n        else\n        (( (result of if (cond) then (x) else (y) )?) = (y))\n      )\n    )\n\n  interaction\n    (make (x:Number ref) flow initially from (y:Number in)):Activation in\n  is\n    (\n      ((x)?) = (\n                  ((new (x))!)\n                  fallback to\n                  (if (init) then (y) else (previous ((x)!)) )\n                )\n    )\n\n\nis\n  (\n    ({\n      theNumber:((new ( y ))?)\n      theResult:(( y )!)\n    })\n    with behaviour\n    (make ( y ) flow initially from (1) )\n  )\n', 






























































































































































    scenario: '[\n  {\n    "args":  {},\n    "inter":  { "theNumber": null,  "theResult": 1 }\n  },\n  {\n    "args":  {},\n    "inter":  { "theNumber": null,  "theResult": 1 }\n  },\n  {\n    "args":  {},\n    "inter":  { "theNumber": 78,  "theResult": 78 }\n  },\n  {\n    "args":  {},\n    "inter":  { "theNumber": null,  "theResult": 78 }\n  },\n  {\n    "args":  {},\n    "inter":  { "theNumber": 67,  "theResult": 67 }\n  },\n  {\n    "args":  {},\n    "inter":  { "theNumber": -4,  "theResult": -4 }\n  },\n  {\n    "args":  {},\n    "inter":  { "theNumber": null,  "theResult": -4 }\n  },\n  {\n    "args":  {},\n    "inter":  { "theNumber": null,  "theResult": -4 }\n  },\n  {\n    "args":  {},\n    "inter":  { "theNumber": null,  "theResult": -4 }\n  },\n  {\n    "args":  {},\n    "inter":  { "theNumber": 42,  "theResult": 42 }\n  }\n]\n' }, 










































  { 
    name: 'Definition Of Previous', 
    fileName: 'example/ok/definitionOfPrevious', 
    code: 'interaction\n  (bob):{theNumber:Number in,theResult:Number out}\nwith\n\n  interaction\n    (previous (x:Number in)):Number out\n  is\n    (\n      ((the previous(x))!)\n      with behaviour\n      ( ((the previous(x))?) = previous (x))\n    )\n\nis\n  ({\n    theNumber:((x)?)\n    theResult:(previous((x)!))\n  })\n', 


















    scenario: '[\n  {\n    "args":  {},\n    "inter":  { "theNumber": 50,  "theResult": null }\n  },\n  {\n    "args":  {},\n    "inter":  { "theNumber": 78,  "theResult": 50 }\n  },\n  {\n    "args":  {},\n    "inter":  { "theNumber": null,  "theResult": 78 }\n  },\n  {\n    "args":  {},\n    "inter":  { "theNumber": 42,  "theResult": null }\n  },\n  {\n    "args":  {},\n    "inter":  { "theNumber": 67,  "theResult": 42 }\n  }\n]\n' }, 






















  { 
    name: 'Definitionof If Then Else', 
    fileName: 'example/ok/definitionofIfThenElse', 
    code: 'interaction\n (test (t:Number in)):Number out\nwith\n\n\n  interaction\n    ((u:Number in)==(v:Number in)):Boolean out\n  with\n    interaction (is equal):{{a:Number,b:Number}->Boolean}out is (function isEqual)\n  is\n    (\n      ( (result of (u)==(v))!)\n      with behaviour\n      (apply (is equal) to ({a:(u),b:(v)}) and get ( (result of (u)==(v))?) )\n    )\n\n\n  interaction\n    (when (cond:Boolean in) then (a:Activation out) else (b:Activation out)):Activation in\n  with\n    interaction\n      (whenThenElse):{{cond:Boolean,source:Activation}->{a:Activation,b:Activation}}out\n    is\n      (function whenThenElse)\n  is\n    (\n      ( (activation of when (cond) then (a) else (b))?)\n      with behaviour\n      (\n        apply\n        (whenThenElse)\n        to\n        ({  cond:(cond)  source:( (activation of when (cond) then (a) else (b))!)   })\n        and get\n        ({a:(a) b:(b)})\n      )\n    )\n\n    interaction\n      (if (cond:Boolean in) then (x:Number in) else (y:Number in)):Number out\n    is\n    (\n      ( (result of if (cond) then (x) else (y))?)\n      with behaviour\n      (\n        when\n        (cond)\n        then\n        (( (result of if (cond) then (x) else (y))!) = (x))\n        else\n        (( (result of if (cond) then (x) else (y))!) = (y))\n      )\n    )\n\nis\n  (if((t)==(1))then(3)else(4))\n', 
























































    scenario: '[\n  {\n    "args":  {"t":0},\n    "inter":  4\n  },\n  {\n    "args":  {"t":1},\n    "inter":  3\n  },\n  {\n    "args":  {"t":2},\n    "inter":  4\n  },\n  {\n    "args":  {"t":3},\n    "inter":  4\n  }\n]\n' }, 


















  { 
    name: 'Dereferencing', 
    fileName: 'example/ok/dereferencing', 
    code: 'interaction\n  (bob):{theNumber:Number in,theResult:Number out}\nwith\n\n  interaction\n    ((x:{theNumber:Number in,theResult:Number out}).theNumber):Number out\n  is\n    (((#(x).theNumber)!) with behaviour (({theNumber:((#(x).theNumber)?)})=(x)))\n\n  interaction\n    ((x:{theNumber:Number in,theResult:Number out}).theResult):Number in\n  is\n    (((#(x).theResult)!) with behaviour ((x)=({theResult:((#(x).theResult)?)})))\n\nis\n  (\n    ( (this)?)\n    with behaviour\n    ((( (this)!).theResult)=(( (this)!).theNumber) )\n  )\n', 




















    scenario: '[\n  {\n    "args":  {},\n    "inter":  { "theNumber": 50,  "theResult": 50 }\n  },\n  {\n    "args":  {},\n    "inter":  { "theNumber": 78,  "theResult": 78 }\n  },\n  {\n    "args":  {},\n    "inter":  { "theNumber": null,  "theResult": null }\n  },\n  {\n    "args":  {},\n    "inter":  { "theNumber": 42,  "theResult": 42 }\n  },\n  {\n    "args":  {},\n    "inter":  { "theNumber": 67,  "theResult": 67 }\n  }\n]\n' }, 






















  { 
    name: 'Fake Affectation', 
    fileName: 'example/ok/fakeAffectation', 
    code: 'interaction\n  (bob):{theNumber:Number in,theResult:Number out}\nwith\n  interaction\n    ((a:Number out)=fake=(b:Number in)):Activation in\n  with\n    interaction (identity):{Number->Number}out is (function identity)\n  is\n    (apply (identity) to (b) and get (a))\nis\n  (\n    ({\n      theNumber:((theNumber)?)\n      theResult:((theResult)!)\n    })\n  with behaviour\n    (((theResult)?)=fake=((theNumber)!))\n  )\n', 


















    scenario: '[\n  {\n    "args":  {},\n    "inter":  { "theNumber": 50,  "theResult": 50 }\n  },\n  {\n    "args":  {},\n    "inter":  { "theNumber": 78,  "theResult": 78 }\n  },\n  {\n    "args":  {},\n    "inter":  { "theNumber": null,  "theResult": null }\n  },\n  {\n    "args":  {},\n    "inter":  { "theNumber": 42,  "theResult": 42 }\n  },\n  {\n    "args":  {},\n    "inter":  { "theNumber": 67,  "theResult": 67 }\n  }\n]\n' }, 






















  { 
    name: 'Function Application', 
    fileName: 'example/ok/functionApplication', 
    code: 'interaction\n  (bob):{theNumber:Number in,theResult:Number out}\nwith\n  interaction (add one):{Number->Number}out is (function addOne)\nis\n  (\n    ({\n      theNumber:((theNumber)?)\n      theResult:((theResult)!)\n    })\n    with behaviour\n    (apply(add one) to ((theNumber)!) and get ((theResult)?))\n  )\n', 













    scenario: '[\n  {\n    "args":  {},\n    "inter":  { "theNumber": 50,  "theResult": 51 }\n  },\n  {\n    "args":  {},\n    "inter":  { "theNumber": 78,  "theResult": 79 }\n  },\n  {\n    "args":  {},\n    "inter":  { "theNumber": null,  "theResult": null }\n  },\n  {\n    "args":  {},\n    "inter":  { "theNumber": 42,  "theResult": 43 }\n  },\n  {\n    "args":  {},\n    "inter":  { "theNumber": 67,  "theResult": 68 }\n  }\n]\n' }, 






















  { 
    name: 'Literals', 
    fileName: 'example/ok/literals', 
    code: 'interaction\n  (ok literal):Number out\nwith\n\n  interaction\n    ((a:Number in) + (b:Number in)):Number out\n  with\n    interaction\n      (addition):{{a:Number,b:Number}->Number}out\n    is\n      (function addition)\n  is\n    (((#(a)+(b))!) with behaviour ((addition)({a:(a)b:(b)})=((#(a)+(b))?)))\n\nis\n  ((9)+(9))\n', 
















    scenario: '\n[\n  {\n    "args": {},\n    "inter" : 18\n  },\n  {\n  "args": {},\n  "inter" : 18\n},\n{\n  "args": {},\n  "inter" : 18\n},\n{\n  "args": {},\n  "inter" : 18\n}\n]\n' }, 



















  { 
    name: 'Problematic Definitionof If Then Else', 
    fileName: 'example/ok/problematicDefinitionofIfThenElse', 
    code: 'interaction\n (test (a:Number in)):{theNumber:Number in,theResult:Number out}\nwith\n\n\n  interaction\n    ((a:Number in)==(b:Number in)):Boolean out\n  with\n    interaction (isEqual):{{a:Number,b:Number}->Boolean}out is (function isEqual)\n  is\n    (\n      ((result of (a)==(b))!)\n      with behaviour\n      (apply (isEqual) to ({a:(a),b:(b)}) and get ((result of (a)==(b))?) )\n    )\n\n\n  interaction\n    (when (cond:Boolean in) then (a:Activation out) else (b:Activation out)):Activation in\n  with\n    interaction (whenThenElse):{{cond:Boolean,source:Activation}->{a:Activation,b:Activation}}out is (function whenThenElse)\n  is\n    (\n      ((activation of when (cond) then (a) else (b))?)\n      with behaviour\n      (\n        apply\n        (whenThenElse)\n        to\n        ({  cond:(cond)  source:((activation of when (cond) then (a) else (b))!)   })\n        and get\n        ({a:(a) b:(b)})\n      )\n    )\n\n    interaction\n      (if (cond:Boolean in) then (a:Number in) else (b:Number in)):Number out\n    is\n      (\n        ((result of if (cond) then (a) else (b))!)\n        with behaviour\n        (\n          when\n          (cond)\n          then\n          (((result of if (cond) then (a) else (b))?) = (a))\n          else\n          (((result of if (cond) then (a) else (b))?) = (b))\n        )\n      )\n\nis\n  (if((a)==(1))then({theNumber:((b)?),theResult:((b)!)})else({theNumber:((b)?),theResult:(-8000)}))\n', 





















































    scenario: '[\n  {\n    "args":  {"t":0},\n    "inter":  4\n  },\n  {\n    "args":  {"t":1},\n    "inter":  3\n  },\n  {\n    "args":  {"t":2},\n    "inter":  4\n  },\n  {\n    "args":  {"t":3},\n    "inter":  4\n  }\n]\n' }, 


















  { 
    name: 'Real Affectation Expression', 
    fileName: 'example/ok/realAffectationExpression', 
    code: 'interaction\n  (bob):{theNumber:Number in,theResult:Number out}\nwith\n\n  interaction (addition):{{a:Number,b:Number}->Number}out is (function addition)\n\n  interaction\n    ((a:Number in)+(b:Number in)):Number out\n  is\n    (\n      ((variable result of (a)+(b))!)\n      with behaviour\n      (\n        apply (addition)\n        to ({a:(a)b:(b)})\n        and get ((variable result of (a)+(b))?)\n      )\n    )\n\nis\n  (\n    ({\n      theNumber:((theNumber)?)\n      theResult:((theResult)!)\n    })\n    with behaviour\n    (((theResult)?)=((1)+((theNumber)!)))\n  )\n', 




























    scenario: '[\n  {\n    "args":  {},\n    "inter":  { "theNumber": 50,  "theResult": 51 }\n  },\n  {\n    "args":  {},\n    "inter":  { "theNumber": 78,  "theResult": 79 }\n  },\n  {\n    "args":  {},\n    "inter":  { "theNumber": null,  "theResult": null }\n  },\n  {\n    "args":  {},\n    "inter":  { "theNumber": 42,  "theResult": 43 }\n  },\n  {\n    "args":  {},\n    "inter":  { "theNumber": 67,  "theResult": 68 }\n  }\n]\n' }, 






















  { 
    name: 'Referential Transparency', 
    fileName: 'example/ok/referentialTransparency', 
    code: 'interaction\n  (main):{theNumber:Number in,theResult:Number out}\nwith\n\n  interaction (z):Number out\n  is ((variable y b)?)\n\n  interaction (y):Number out\n  is ((variable y b)?)\n\n  interaction (x):Number out\n  is ((variable b)!)\nis\n  ({\n    theNumber:(( x (y) ((variable b)!))?)\n    theResult:(( x (z) (x))!)\n  })\n', 

















    scenario: '[\n  {\n    "args":  {},\n    "inter":  { "theNumber": 50,  "theResult": 50 }\n  },\n  {\n    "args":  {},\n    "inter":  { "theNumber": 78,  "theResult": 78 }\n  },\n  {\n    "args":  {},\n    "inter":  { "theNumber": null,  "theResult": null }\n  },\n  {\n    "args":  {},\n    "inter":  { "theNumber": 42,  "theResult": 42 }\n  },\n  {\n    "args":  {},\n    "inter":  { "theNumber": 67,  "theResult": 67 }\n  }\n]\n' }, 






















  { 
    name: 'Resolver', 
    fileName: 'example/ok/resolver', 
    code: 'interaction\n  (bob):{theNumber:Number in,theOther:Number in, theResult:Number out, theLast:Number out}\nis\n  ({\n    theNumber:((x)?)\n    theOther:((x)?)\n    theResult:((x)!)\n    theLast:((x)!)\n  })\n', 









    scenario: '[\n  {\n    "args":  {},\n    "inter":  { "theNumber": 50, "theOther":null, "theResult": 50, "theLast": 50 }\n  },\n  {\n    "args":  {},\n    "inter":  { "theNumber": 78,  "theOther":null,"theResult": 78 , "theLast": 78}\n  },\n  {\n    "args":  {},\n    "inter":  { "theNumber": null, "theOther":null, "theResult": null, "theLast": null }\n  },\n  {\n    "args":  {},\n    "inter":  { "theNumber": null, "theOther":42, "theResult": 42, "theLast": 42 }\n  },\n  {\n    "args":  {},\n    "inter":  { "theNumber": 67, "theOther":null, "theResult": 67, "theLast": 67 }\n  }\n]\n' }, 






















  { 
    name: 'Simple', 
    fileName: 'example/ok/simple', 
    code: 'interaction\n  (main):{theNumber:Number in,theResult:Number out}\nis\n  ({\n    theNumber:((x)?)\n    theResult:((x)!)\n  })\n', 







    scenario: '[\n  {\n    "args":  {},\n    "inter":  { "theNumber": 50,  "theResult": 50 }\n  },\n  {\n    "args":  {},\n    "inter":  { "theNumber": 78,  "theResult": 78 }\n  },\n  {\n    "args":  {},\n    "inter":  { "theNumber": null,  "theResult": null }\n  },\n  {\n    "args":  {},\n    "inter":  { "theNumber": 42,  "theResult": 42 }\n  },\n  {\n    "args":  {},\n    "inter":  { "theNumber": 67,  "theResult": 67 }\n  }\n]\n' }, 






















  { 
    name: 'Simple Cursor Function', 
    fileName: 'example/ok/simpleCursorFunction', 
    code: 'interaction\n  (cursor of (mouse:Mouse in)):Graphics out\nwith\n  interaction (cursor):{Mouse->Graphics}out is (function cursor)\nis\n  (((#cursor of (mouse))!)\n  with behaviour\n  ((cursor)(mouse)=((#cursor of (mouse))?)))\n', 








    scenario: '[{\n  "args": {\n    "mouse": {\n      "buttons": 0,\n      "position": {\n        "x": 42,\n        "y": 63\n      }\n    }\n  },\n  "inter": {\n    "type": "shadow",\n    "blur": 20,\n    "offset": {\n      "x": 0,\n      "y": 4\n    },\n    "color": "rgba(0, 0, 0, 0.5)",\n    "content": {\n      "type": "translate",\n      "x": 42,\n      "y": 63,\n      "content": {\n        "type": "scale",\n        "width": 1,\n        "height": 1,\n        "content": {\n          "type": "fill",\n          "style": "rgba(200, 0, 200, 1)",\n          "content": {\n            "type": "path",\n            "content": [{\n              "type": "begin"\n            }, {\n              "type": "move",\n              "x": 0,\n              "y": 0\n            }, {\n              "type": "line",\n              "x": 0,\n              "y": 15\n            }, {\n              "type": "line",\n              "x": 10.6,\n              "y": 10.6\n            }, {\n              "type": "close"\n            }]\n          }\n        }\n      }\n    }\n  }\n}, {\n  "args": {\n    "mouse": {\n      "buttons": 1,\n      "position": {\n        "x": 31,\n        "y": 89\n      }\n    }\n  },\n  "inter": {\n    "type": "shadow",\n    "blur": 10,\n    "offset": {\n      "x": 0,\n      "y": 2\n    },\n    "color": "rgba(0, 0, 0, 0.5)",\n    "content": {\n      "type": "translate",\n      "x": 31,\n      "y": 89,\n      "content": {\n        "type": "scale",\n        "width": 0.8,\n        "height": 0.8,\n        "content": {\n          "type": "fill",\n          "style": "rgba(200, 0, 200, 1)",\n          "content": {\n            "type": "path",\n            "content": [{\n              "type": "begin"\n            }, {\n              "type": "move",\n              "x": 0,\n              "y": 0\n            }, {\n              "type": "line",\n              "x": 0,\n              "y": 15\n            }, {\n              "type": "line",\n              "x": 10.6,\n              "y": 10.6\n            }, {\n              "type": "close"\n            }]\n          }\n        }\n      }\n    }\n  }\n}]\n' }, 











































































































  { 
    name: 'Simple Func', 
    fileName: 'example/ok/simpleFunc', 
    code: 'interaction\n  (bob):{theNumber:Number in,theResult:Number out}\nwith\n  interaction\n    (bob(x:Number in)):Number out\n  with\n    interaction\n      (addOne):{Number->Number}out\n    is\n      (function addOne)\n  is\n    (((result of bob(x))!) with behaviour ((addOne)(x)=((result of bob(x))?)))\nis\n  ({theNumber:((a)?),theResult:(bob((a)!))})\n', 














    scenario: '[\n  {\n    "args":  {},\n    "inter":  { "theNumber": 50,  "theResult": 51 }\n  },\n  {\n    "args":  {},\n    "inter":  { "theNumber": 78,  "theResult": 79 }\n  },\n  {\n    "args":  {},\n    "inter":  { "theNumber": null,  "theResult": null }\n  },\n  {\n    "args":  {},\n    "inter":  { "theNumber": 42,  "theResult": 43 }\n  },\n  {\n    "args":  {},\n    "inter":  { "theNumber": 67,  "theResult": 68 }\n  }\n]\n' }, 






















  { 
    name: 'Simple Previous Next', 
    fileName: 'example/ok/simplePreviousNext', 
    code: 'interaction\n  (main):{theNumber:Number in,theResult:Number out}\nis\n  (\n    ({\n      theNumber:((x)?)\n      theResult:((y)!)\n    })\n    with behaviour\n    ( ((y)?) = previous ((x)!) )\n  )\n', 











    scenario: '[\n  {\n    "args":  {},\n    "inter":  { "theNumber": 50,  "theResult": null }\n  },\n  {\n    "args":  {},\n    "inter":  { "theNumber": 78,  "theResult": 50 }\n  },\n  {\n    "args":  {},\n    "inter":  { "theNumber": null,  "theResult": 78 }\n  },\n  {\n    "args":  {},\n    "inter":  { "theNumber": 42,  "theResult": null }\n  },\n  {\n    "args":  {},\n    "inter":  { "theNumber": 67,  "theResult": 42 }\n  }\n]\n' }, 






















  { 
    name: 'Sum Of Previous', 
    fileName: 'example/ok/sumOfPrevious', 
    code: 'interaction\n  (wow (a:Number in)):Number out\nwith\n\n  interaction\n    ((a:Number in) + (b:Number in)):Number out\n  with\n    interaction (addition):{{a:Number,b:Number}->Number}out is (function addition)\n  is\n    (((result of (a)+(b))!) with behaviour ((addition)({a:(a)b:(b)})=((result of (a)+(b))?)))\n\n  interaction\n    (previous(a:Number in)):Number out\n  is\n    (((the previous (a))!) with behaviour (((the previous (a))?) = previous (a)))\n\nis\n    ((previous(a))+(previous(a)))\n', 


















    scenario: '\n[\n  {\n    "args": {\n      "a": 1\n    },\n    "inter" : null\n  },\n  {\n    "args": {\n      "a": 8\n    },\n    "inter" : 2\n  },\n   {\n    "args": {\n      "a": 6\n    },\n    "inter" : 16\n  }\n]\n' }, 





















  { 
    name: 'Ui Button', 
    fileName: 'example/ok/uiButton', 
    code: 'interaction\n  (simple UI):{mouse:Mouse in,graphics:Graphics out}\nwith\n\n  interaction\n    (button widget):{mouse:Mouse in,graphics:Graphics out}\n  with\n    interaction (button):{{x:Number,y:Number,width:Number,height:Number,text:Text,pushed:Boolean}->Graphics}out is (function button)\n  is\n    (\n      ({\n        mouse: ((the mouse for button widget)?)\n        graphics: ((the graphics for button widget)!)\n      })\n      with behaviour\n      ((button)({x:(10)y:(10)width:(200)height:(100)text:("OK")pushed:(false)})=((the graphics for button widget)?))\n    )\n\nis\n  (button widget)\n', 




















    scenario: '[{\n  "memo": {},\n  "state": {},\n  "args": {},\n  "inter": {\n    "mouse": {\n      "buttons": 0,\n      "position": {\n        "x": 42,\n        "y": 63\n      },\n      "wheel": {\n        "x": 0,\n        "y": 0,\n        "z": 0\n      }\n    },\n    "graphics":\n    {\n      "type": "shadow",\n      "blur": 20,\n      "offset": {\n        "x": 0,\n        "y": 4\n      },\n      "color": "rgba(0, 0, 0, 0.5)",\n      "content": {\n        "type": "group",\n        "content": [{\n          "type": "fill",\n          "style": "rgba(0, 171, 255, 1)",\n          "content": {\n            "type": "rect",\n            "x": 10,\n            "y": 10,\n            "width": 200,\n            "height": 100\n          }\n        }, {\n          "type": "fill",\n          "style": "rgba(255, 255, 255, 1)",\n          "content": {\n            "type": "text",\n            "textBaseline": "middle",\n            "textAlign": "center",\n            "font": "200 30px Helvetica neue",\n            "text": "OK",\n            "x": 110,\n            "y": 60\n          }\n        }]\n      }\n    }\n  }\n}]\n' }, 























































  { 
    name: 'Ui Button With Cursor', 
    fileName: 'example/ok/uiButtonWithCursor', 
    code: 'interaction\n  (simple UI):{mouse:Mouse in,graphics:Graphics out}\nwith\n\n  interaction\n    (group widget containing (a:{mouse:Mouse out,graphics:Graphics in}) and (b:{mouse:Mouse out,graphics:Graphics in})):{mouse:Mouse in,graphics:Graphics out}\n  is\n    ({\n      mouse:    (both ((a).mouse) and ((b).mouse))\n      graphics: (graphics containing ((a).graphics) and ((b).graphics))\n    })\n\n  interaction\n    ((x:{mouse:Mouse out,graphics:Graphics in}).mouse):Mouse in\n  is\n    (((result of (x).mouse)!)\n    with behaviour\n    ((x)=({mouse:((result of (x).mouse)?)})))\n\n\n\n  interaction\n    ((x:{mouse:Mouse out,graphics:Graphics in}).graphics):Graphics out\n  is\n    (((result of (x).graphics)!)\n    with behaviour\n    ((x)=({graphics:((result of (x).graphics)?)})))\n\n\n\n  interaction\n    (both (a:Mouse out) and (b:Mouse out)):Mouse in\n  is\n    (\n      ( (#both(a)and(b)) ?)\n      with behaviour\n      (all\n        ( (a) = ((#both(a)and(b))!) )\n        ( (b) = ((#both(a)and(b))!) )\n      )\n    )\n\n  interaction\n    (graphics containing (a:Graphics in) and (b:Graphics in)):Graphics out\n  with\n    interaction (group graphics):{{a:Graphics,b:Graphics}->Graphics}out is (function group)\n  is\n    (\n      ((result of graphics containing (a) and (b))!)\n      with behaviour\n      (\n        (group graphics)\n        ({a:(a),b:(b)})\n        =\n        ((result of graphics containing (a) and (b))?)\n      )\n    )\n\n\n  interaction\n    (all (a:Activation out)  (b:Activation out)):Activation in\n  with\n    interaction (func all):{Activation->{a:Activation,b:Activation}} out is (function all)\n  is\n    (\n      ((variable all (a) (b))?)\n      with behaviour\n      (\n        apply\n        (func all)\n        to\n        ((variable all (a) (b))!)\n        and get\n        ({a:(a) b:(b)})\n      )\n    )\n\n\n  interaction\n    (cursor widget):{mouse:Mouse in,graphics:Graphics out}\n  with\n    interaction (cursor):{Mouse->Graphics}out is (function cursor)\n  is\n    (\n      ({\n        mouse: ((the mouse for cursor widget)?)\n        graphics: ((the graphics for cursor widget)!)\n      })\n      with behaviour\n      ((cursor)((the mouse for cursor widget)!)=((the graphics for cursor widget)?))\n    )\n\n\n\n\n\n  interaction\n    (button widget):{mouse:Mouse in,graphics:Graphics out}\n  with\n    interaction (button):{{x:Number,y:Number,width:Number,height:Number,text:Text,pushed:Boolean}->Graphics}out is (function button)\n  is\n    (\n      ({\n        mouse: ((the mouse for button widget)?)\n        graphics: ((the graphics for button widget)!)\n      })\n      with behaviour\n      ((button)({x:(10)y:(10)width:(200)height:(100)text:("OK")pushed:(false)})=((the graphics for button widget)?))\n    )\n\nis\n  (group widget containing (cursor widget) and (button widget))\n', 
















































































































    scenario: '[{\n  "memo": {},\n  "state": {},\n  "args": {},\n  "inter": {\n    "mouse": {\n      "buttons": 0,\n      "position": {\n        "x": 42,\n        "y": 63\n      },\n      "wheel": {\n        "x": 0,\n        "y": 0,\n        "z": 0\n      }\n    },\n    "graphics": {\n      "type": "group",\n      "content": [{\n        "type": "shadow",\n        "blur": 20,\n        "offset": {\n          "x": 0,\n          "y": 4\n        },\n        "color": "rgba(0, 0, 0, 0.5)",\n        "content": {\n          "type": "translate",\n          "x": 42,\n          "y": 63,\n          "content": {\n            "type": "scale",\n            "width": 1,\n            "height": 1,\n            "content": {\n              "type": "fill",\n              "style": "rgba(200, 0, 200, 1)",\n              "content": {\n                "type": "path",\n                "content": [{\n                  "type": "begin"\n                }, {\n                  "type": "move",\n                  "x": 0,\n                  "y": 0\n                }, {\n                  "type": "line",\n                  "x": 0,\n                  "y": 15\n                }, {\n                  "type": "line",\n                  "x": 10.6,\n                  "y": 10.6\n                }, {\n                  "type": "close"\n                }]\n              }\n            }\n          }\n        }\n      }, {\n        "type": "shadow",\n        "blur": 20,\n        "offset": {\n          "x": 0,\n          "y": 4\n        },\n        "color": "rgba(0, 0, 0, 0.5)",\n        "content": {\n          "type": "group",\n          "content": [{\n            "type": "fill",\n            "style": "rgba(0, 171, 255, 1)",\n            "content": {\n              "type": "rect",\n              "x": 10,\n              "y": 10,\n              "width": 200,\n              "height": 100\n            }\n          }, {\n            "type": "fill",\n            "style": "rgba(255, 255, 255, 1)",\n            "content": {\n              "type": "text",\n              "textBaseline": "middle",\n              "textAlign": "center",\n              "font": "200 30px Helvetica neue",\n              "text": "OK",\n              "x": 110,\n              "y": 60\n            }\n          }]\n        }\n      }]\n    }\n\n  }\n}]\n' }, 




































































































  { 
    name: 'Ui Cursor', 
    fileName: 'example/ok/uiCursor', 
    code: 'interaction\n  (simple UI):{mouse:Mouse in,graphics:Graphics out}\nwith\n\n  interaction\n    (cursor widget):{mouse:Mouse in,graphics:Graphics out}\n  with\n    interaction (cursor):{Mouse->Graphics}out is (function cursor)\n  is\n    (\n      ({\n        mouse: ((the mouse for cursor widget)?)\n        graphics: ((the graphics for cursor widget)!)\n      })\n      with behaviour\n      ((cursor)((the mouse for cursor widget)!)=((the graphics for cursor widget)?))\n    )\n\nis\n  (cursor widget)\n', 




















    scenario: '[{\n  "args": {},\n  "inter": {\n    "mouse": {\n      "buttons": 0,\n      "position": {\n        "x": 42,\n        "y": 63\n      },\n      "wheel": {\n        "x": 0,\n        "y": 0,\n        "z": 0\n      }\n    },\n    "graphics": {\n      "type": "shadow",\n      "blur": 20,\n      "offset": {\n        "x": 0,\n        "y": 4\n      },\n      "color": "rgba(0, 0, 0, 0.5)",\n      "content": {\n        "type": "translate",\n        "x": 42,\n        "y": 63,\n        "content": {\n          "type": "scale",\n          "width": 1,\n          "height": 1,\n          "content": {\n            "type": "fill",\n            "style": "rgba(200, 0, 200, 1)",\n            "content": {\n              "type": "path",\n              "content": [{\n                "type": "begin"\n              }, {\n                "type": "move",\n                "x": 0,\n                "y": 0\n              }, {\n                "type": "line",\n                "x": 0,\n                "y": 15\n              }, {\n                "type": "line",\n                "x": 10.6,\n                "y": 10.6\n              }, {\n                "type": "close"\n              }]\n            }\n          }\n        }\n      }\n    }\n  }\n}]\n' }, 




























































  { 
    name: 'Ui Detailled Button With Cursor', 
    fileName: 'example/ok/uiDetailledButtonWithCursor', 
    code: 'interaction\n  (simple UI):{mouse:{buttons:Number, position:{x: Number,y:Number}} in,graphics:Graphics out}\nwith\n\n  interaction\n    (group widget containing (a:{mouse:{buttons:Number, position:{x: Number,y:Number}} out,graphics:Graphics in}) and (b:{mouse:{buttons:Number, position:{x: Number,y:Number}} out,graphics:Graphics in})):{mouse:{buttons:Number, position:{x: Number,y:Number}} in,graphics:Graphics out}\n  is\n    ({\n      mouse:    (both ((a).mouse) and ((b).mouse))\n      graphics: (graphics containing ((a).graphics) and ((b).graphics))\n    })\n\n  interaction\n    ((x:{mouse:{buttons:Number, position:{x: Number,y:Number}} out,graphics:Graphics in}).mouse):{buttons:Number, position:{x: Number,y:Number}} in\n  is\n    (((result of (x).mouse)!)\n    with behaviour\n    ((x)=({mouse:((result of (x).mouse)?)})))\n\n\n\n  interaction\n    ((x:{mouse:{buttons:Number, position:{x: Number,y:Number}} out,graphics:Graphics in}).graphics):Graphics out\n  is\n    (((result of (x).graphics)!)\n    with behaviour\n    ((x)=({graphics:((result of (x).graphics)?)})))\n\n\n\n  interaction\n    (both (a:{buttons:Number, position:{x: Number,y:Number}} out) and (b:{buttons:Number, position:{x: Number,y:Number}} out)):{buttons:Number, position:{x: Number,y:Number}} in\n  is\n    (\n      ( (#both(a)and(b)) ?)\n      with behaviour\n      (all\n        ( (a) = ((#both(a)and(b))!) )\n        ( (b) = ((#both(a)and(b))!) )\n      )\n    )\n\n  interaction\n    (graphics containing (a:Graphics in) and (b:Graphics in)):Graphics out\n  with\n    interaction (group graphics):{{a:Graphics,b:Graphics}->Graphics}out is (function group)\n  is\n    (\n      ((result of graphics containing (a) and (b))!)\n      with behaviour\n      (\n        (group graphics)\n        ({a:(a),b:(b)})\n        =\n        ((result of graphics containing (a) and (b))?)\n      )\n    )\n\n\n  interaction\n    (all (a:Activation out)  (b:Activation out)):Activation in\n  with\n    interaction (func all):{Activation->{a:Activation,b:Activation}} out is (function all)\n  is\n    (\n      ((variable all (a) (b))?)\n      with behaviour\n      (\n        apply\n        (func all)\n        to\n        ((variable all (a) (b))!)\n        and get\n        ({a:(a) b:(b)})\n      )\n    )\n\n\n  interaction\n    (cursor widget):{mouse:{buttons:Number, position:{x: Number,y:Number}} in,graphics:Graphics out}\n  with\n    interaction (cursor):{{buttons:Number, position:{x: Number,y:Number}}->Graphics}out is (function cursor)\n  is\n    (\n      ({\n        mouse: ((the mouse for cursor widget)?)\n        graphics: ((the graphics for cursor widget)!)\n      })\n      with behaviour\n      ((cursor)((the mouse for cursor widget)!)=((the graphics for cursor widget)?))\n    )\n\n\n\n\n\n  interaction\n    (button widget):{mouse:{buttons:Number, position:{x: Number,y:Number}} in,graphics:Graphics out}\n  with\n    interaction (button):{{x:Number,y:Number,width:Number,height:Number,text:Text,pushed:Boolean}->Graphics}out is (function button)\n  is\n    (\n      ({\n        mouse: ((the mouse for button widget)?)\n        graphics: ((the graphics for button widget)!)\n      })\n      with behaviour\n      ((button)({x:(10)y:(10)width:(200)height:(100)text:("OK")pushed:(false)})=((the graphics for button widget)?))\n    )\n\nis\n  (group widget containing (button widget) and (cursor widget) )\n', 
















































































































    scenario: '[{\n  "memo": {},\n  "state": {},\n  "args": {},\n  "inter": {\n    "mouse": {\n      "buttons": 0,\n      "position": {\n        "x": 42,\n        "y": 63\n      },\n      "wheel": {\n        "x": 0,\n        "y": 0,\n        "z": 0\n      }\n    },\n    "graphics": {\n      "type": "group",\n      "content": [{\n        "type": "shadow",\n        "blur": 20,\n        "offset": {\n          "x": 0,\n          "y": 4\n        },\n        "color": "rgba(0, 0, 0, 0.5)",\n        "content": {\n          "type": "group",\n          "content": [{\n            "type": "fill",\n            "style": "rgba(0, 171, 255, 1)",\n            "content": {\n              "type": "rect",\n              "x": 10,\n              "y": 10,\n              "width": 200,\n              "height": 100\n            }\n          }, {\n            "type": "fill",\n            "style": "rgba(255, 255, 255, 1)",\n            "content": {\n              "type": "text",\n              "textBaseline": "middle",\n              "textAlign": "center",\n              "font": "200 30px Helvetica neue",\n              "text": "OK",\n              "x": 110,\n              "y": 60\n            }\n          }]\n        }\n      }, {\n        "type": "shadow",\n        "blur": 20,\n        "offset": {\n          "x": 0,\n          "y": 4\n        },\n        "color": "rgba(0, 0, 0, 0.5)",\n        "content": {\n          "type": "translate",\n          "x": 42,\n          "y": 63,\n          "content": {\n            "type": "scale",\n            "width": 1,\n            "height": 1,\n            "content": {\n              "type": "fill",\n              "style": "rgba(200, 0, 200, 1)",\n              "content": {\n                "type": "path",\n                "content": [{\n                  "type": "begin"\n                }, {\n                  "type": "move",\n                  "x": 0,\n                  "y": 0\n                }, {\n                  "type": "line",\n                  "x": 0,\n                  "y": 15\n                }, {\n                  "type": "line",\n                  "x": 10.6,\n                  "y": 10.6\n                }, {\n                  "type": "close"\n                }]\n              }\n            }\n          }\n        }\n      }]\n    }\n\n  }\n}]\n' }, 




































































































  { 
    name: 'Ui Empty With Cursor', 
    fileName: 'example/ok/uiEmptyWithCursor', 
    code: 'interaction\n  (empty UI with cursor):{\n        mouse: {\n          buttons: Number,\n          position: {\n            x: Number,\n            y: Number\n          },\n          wheel: {\n            x: Number,\n            y: Number,\n            z: Number\n          }\n        } in,\n        graphics: Graphics out\n      }\n\nwith\n\n  interaction\n    (cursor of (mouse:{\n          buttons: Number,\n          position: {\n            x: Number,\n            y: Number\n          },\n          wheel: {\n            x: Number,\n            y: Number,\n            z: Number\n          }\n        } in)):Graphics out\n  with\n    interaction (cursor):{{\n          buttons: Number,\n          position: {\n            x: Number,\n            y: Number\n          },\n          wheel: {\n            x: Number,\n            y: Number,\n            z: Number\n          }\n        }->Graphics}out is (function cursor)\n  is\n    (\n      ((#cursor of (mouse))!)\n      with behaviour\n      ((cursor)(mouse)=((#cursor of (mouse))?))\n    )\n\n\nis\n  ({\n        mouse: ((mouse)?)\n        graphics: (cursor of ((mouse)!))\n  })\n', 


























































    scenario: '[{\n  "args": {},\n  "inter": {\n    "mouse": {\n      "buttons": 0,\n      "position": {\n        "x": 42,\n        "y": 63\n      },\n      "wheel": {\n        "x": 0,\n        "y": 0,\n        "z": 0\n      }\n    },\n    "graphics": {\n      "type": "shadow",\n      "blur": 20,\n      "offset": {\n        "x": 0,\n        "y": 4\n      },\n      "color": "rgba(0, 0, 0, 0.5)",\n      "content": {\n        "type": "translate",\n        "x": 42,\n        "y": 63,\n        "content": {\n          "type": "scale",\n          "width": 1,\n          "height": 1,\n          "content": {\n            "type": "fill",\n            "style": "rgba(200, 0, 200, 1)",\n            "content": {\n              "type": "path",\n              "content": [{\n                "type": "begin"\n              }, {\n                "type": "move",\n                "x": 0,\n                "y": 0\n              }, {\n                "type": "line",\n                "x": 0,\n                "y": 15\n              }, {\n                "type": "line",\n                "x": 10.6,\n                "y": 10.6\n              }, {\n                "type": "close"\n              }]\n            }\n          }\n        }\n      }\n    }\n  }\n}]\n' }] };